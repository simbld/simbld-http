pub enum ResponsesClientCodes {
  BadRequest = 400,
  Unauthorized = 401,
  PaymentRequired = 402,
  Forbidden = 403,
  NotFound = 404,
  MethodNotAllowed = 405,
  NotAcceptable = 406,
  ProxyAuthenticationRequired = 407,
  RequestTimeout = 408,
  Conflict = 409,
  Gone = 410,
  LengthRequired = 411,
  PreconditionFailed = 412,
  PayloadTooLarge = 413,
  RequestUriTooLong = 414,
  UnsupportedMediaType = 415,
  RequestedRangeUnsatisfiable = 416,
  ExpectationFailed = 417,
  ImATeapot = 418,
  PageExpired = 419,
  MethodFailure = 420,
  EnhanceYourCalm = 420, // Twitter
  MisdirectedRequest = 421,
  UnprocessableEntity = 422,
  LockedTemporarilyUnavailable = 423,
  FailedDependency = 424,
  TooEarly = 425, // Only for Firefox
  UpgradeRequired = 426,
  PreconditionRequired = 428,
  TooManyRequests = 429,
  RequestHeaderFieldsTooLarge = 430,
  LoginRequired = 432,
  OriginError = 433,
  DestinationError = 434,
  TooLarge = 435,
  SSLCertificateError = 436,
  SSLCertificateRequired = 437,
  NoCertificate = 438,
  LoginTimeout = 440,
  OverDataQuota = 441,
  NoResponse = 444,
  RetryWith = 449,
  BlockedByWindowsParentalControls = 450,
  UnavailableForLegalReasons = 451,
  Redirect = 451,
  TooManyRecipients = 452,
  MethodNotValidInThisState = 455,
  UnrecoverableError = 456,
  ClientClosedConnexionPrematurely = 460,
  TooManyForwardedIPAddresses = 463,
  InternetSecurityError = 467,
  TemporaryUnavailable = 480,
  RequestHeaderTooLarge = 494,
  CertError = 495,
  NoCert = 496,
  HTTPToHTTPS = 497,
  InvalidToken = 498,
  ClientClosedRequest = 499,
  TokenRequired = 499,
}

impl ResponsesClientCodes {
  pub fn to_u16(&self) -> u16 {
    *self as u16
  }

  pub fn description(&self) -> &'static str {
    match self {
      ResponsesClientCodes::BadRequest => "The server cannot process the request due to malformed syntax or invalid parameters in the client request",
      ResponsesClientCodes::Unauthorized => "The client must authenticate itself to get the requested resource, typically a 401 Unauthorized response",
      ResponsesClientCodes::PaymentRequired => "Payment is required to access the requested resource, though this is not widely used in practice",
      ResponsesClientCodes::Forbidden => "The server understands the request but refuses to authorize it, indicating insufficient permissions",
      ResponsesClientCodes::NotFound => "The server cannot find the requested resource, indicating a non-existent or inaccessible URI",
      ResponsesClientCodes::MethodNotAllowed => "The HTTP method used in the request is not supported for the target resource",
      ResponsesClientCodes::NotAcceptable => "The requested resource cannot be provided in a format acceptable according to the request's Accept headers",
      ResponsesClientCodes::ProxyAuthenticationRequired => "The client must authenticate with a proxy server before accessing the resource",
      ResponsesClientCodes::RequestTimeout => "The server timed out while waiting for the request from the client. This status code is used to inform the client that the server timed out.",
      ResponsesClientCodes::Conflict => "The request could not be completed due to a conflict with the current state of the target resource",
      ResponsesClientCodes::Gone => "The requested resource is no longer available and has been permanently removed from the server and will not be available again",
      ResponsesClientCodes::LengthRequired => "The request does not include the required Content-Length header",
      ResponsesClientCodes::PreconditionFailed => "One or more conditions in the request headers are not met by the server",
      ResponsesClientCodes::PayloadTooLarge => "The size of the request payload exceeds the server's capacity or configuration limits",
      ResponsesClientCodes::RequestUriTooLong => "The URI of the request is too long for the server to process. This status code is used to inform the client that the request URI is too long",
      ResponsesClientCodes::UnsupportedMediaType => "The media type of the request payload is not supported by the server or target resource",
      ResponsesClientCodes::RequestedRangeUnsatisfiable => "The client requested a range that is not satisfiable for the target resource",
      ResponsesClientCodes::ExpectationFailed => "The server cannot meet the requirements specified in the Expect header field of the request",
      ResponsesClientCodes::ImATeapot => "A playful response indicating the server is a teapot and cannot brew coffee (RFC 2324)",
      ResponsesClientCodes::PageExpired => "Issued by Laravel when a CSRF token is missing or expired, unofficial",
      ResponsesClientCodes::MethodFailure => "The method specified in the request is known by the server but cannot be processed due to a failure in the server's implementation, Issued by Spring when a method has failed. Now deprecated and reserved for backward compatibility, unofficial",
      ResponsesClientCodes::EnhanceYourCalm => "Used by Twitter to indicate that the client has sent too many requests in a given amount of time, unofficial",
      ResponsesClientCodes::MisdirectedRequest => "The request was sent to a server that cannot produce a response, often due to routing issues",
      ResponsesClientCodes::UnprocessableEntity => "The request is well-formed but cannot be processed due to semantic errors, commonly used in APIs, use in WebDav RFC 4918",
      ResponsesClientCodes::LockedTemporarilyUnavailable  => "The resource is locked and cannot be accessed or modified, typically used in WebDav RFC 4918",
      ResponsesClientCodes::FailedDependency => "The request failed because it depended on another operation that failed, often used in WebDav RFC 4918",
      ResponsesClientCodes::TooEarly => "The server is unwilling to process the request because it might be replayed",
      ResponsesClientCodes::UpgradeRequired => "The client must upgrade to a different protocol to continue with the request",
      ResponsesClientCodes::PreconditionRequired => "The server requires the request to include specific preconditions to proceed",
      ResponsesClientCodes::TooManyRequests => "The resource is rate-limited and the client has sent too many requests in the allotted time",
      ResponsesClientCodes::RequestHeaderFieldsTooLarge => "Issued by Shopify to indicate a rate-limit effect. This is used instead of 429, unofficial",
      ResponsesClientCodes::LoginRequired => "Authentication is required to access the requested resource, typically in web applications",
      ResponsesClientCodes::OriginError => "The request was rejected due to an issue with the origin server or client IP",
      ResponsesClientCodes::DestinationError => "The request was rejected due to an issue with the destination server or target configuration",
      ResponsesClientCodes::TooLarge => "The size of the requested resource or payload exceeds the allowable limit for the server",
      ResponsesClientCodes::SSLCertificateError => "An error occurred due to an invalid or untrusted SSL certificate",
      ResponsesClientCodes::SSLCertificateRequired => "The server requires a valid SSL certificate for the connection to proceed securely",
      ResponsesClientCodes::NoCertificate => "The client did not provide an SSL certificate required for secure communication",
      ResponsesClientCodes::LoginTimeout => "The client session timed out and must log in again, iis, unofficial",
      ResponsesClientCodes::OverDataQuota => "The client has exceeded the allocated data quota for the requested operation",
      ResponsesClientCodes::NoResponse => "The server closed the connection without sending any response, often used in scenarios where the server chooses to silently drop the request, nginx, unofficial",
      ResponsesClientCodes::RetryWith => "The user has not provided the required information, iis, unofficial",
      ResponsesClientCodes::BlockedByWindowsParentalControls => "Issued by Microsoft when Windows Parental Controls are turned on and a resource is blocked, unofficial",
      ResponsesClientCodes::UnavailableForLegalReasons => "The server is denying access to the resource due to legal reasons, such as censorship or compliance with local laws",
      ResponsesClientCodes::Redirect => "Indicates a more efficient Exchange ActiveSync server is available, iis, unofficial",
      ResponsesClientCodes::TooManyRecipients => "The server is unable to process the request because it contains too many recipients",
      ResponsesClientCodes::MethodNotValidInThisState => "The method specified in the request is not valid for the current state of the resource or server",
      ResponsesClientCodes::UnrecoverableError => "The server encountered a critical error that prevents it from continuing to process the request",
      ResponsesClientCodes::ClientClosedConnexionPrematurely => "The client closed the connection before the server was able to send a response, often due to a timeout or network interruption",
      ResponsesClientCodes::TooManyForwardedIPAddresses => "The server rejected the request due to an excessive number of forwarded IP addresses in the request headers, potentially indicating a misconfiguration or a security concern",
      ResponsesClientCodes::InternetSecurityError => "An internet security policy violation or configuration issue occurred, often related to SSL/TLS settings, certificates, or protocol mismatches",
      ResponsesClientCodes::TemporaryUnavailable => "The server is temporarily unavailable, usually due to maintenance or overload",
      ResponsesClientCodes::RequestHeaderTooLarge => "The server is unable to process the request because the headers are too large, often due to a misconfiguration or an attack, nginx, unofficial",
      ResponsesClientCodes::CertError => "The SSL certificate presented by the client is invalid or cannot be verified by the server, preventing a secure connection from being established, nginx, unofficial",
      ResponsesClientCodes::NoCert => "A required client certificate wasn't provided, preventing the server from establishing a secure connection, nginx, unofficial",
      ResponsesClientCodes::HTTPToHTTPS => "The client sent an unencrypted HTTP request to a server that requires HTTPS, and the server is redirecting the client to the HTTPS version of the resource, nginx, unofficial",
      ResponsesClientCodes::InvalidToken => "The provided token is invalid, expired, or malformed, and cannot be used for authentication or authorization, Issued by ArcGIS for Server, unofficial",
      ResponsesClientCodes::ClientClosedRequest => "The client closed the connection before the server could provide a response, often due to client timeout or network interruption, nginx, unofficial",
      ResponsesClientCodes::TokenRequired => "The server requires a token to access the requested resource, typically indicating that the client must provide authentication or authorization credentials, Issued by ArcGIS for Server, unofficial",
    }
  }
}
